import sqlite3
import os


def convert_sqlite_to_string():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SQLite —Å–µ—Å—Å–∏—é –≤ —Å—Ç—Ä–æ–∫–æ–≤—É—é"""

    session_file = '../config/secure_session.session'

    if not os.path.exists(session_file):
        print(f'‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        print('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
        return

    try:
        conn = sqlite3.connect(session_file)
        cursor = conn.cursor()

        cursor.execute('SELECT dc_id, server_address, port, auth_key FROM sessions')
        session_data = cursor.fetchone()

        if session_data:
            dc_id, server_address, port, auth_key_blob = session_data

            try:
                from telethon.sessions import StringSession
                try:
                    from telethon.crypto import AuthKey
                except ImportError:
                    from telethon.tl.types import AuthKey

                string_session = StringSession()

                string_session.set_dc(dc_id, server_address, port)

                string_session.auth_key = AuthKey(auth_key_blob)

                session_string = string_session.save()
                print('=' * 50)
                print('‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!')
                print('=' * 50)
                print('SESSION_STRING:', session_string)
                print('=' * 50)
                print('\nüìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')

            except ImportError as e:
                print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}')
                print('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω telethon: pip install telethon')

        else:
            print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª–µ')

    except sqlite3.Error as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    finally:
        if 'conn' in locals():
            conn.close()


if __name__ == '__main__':
    convert_sqlite_to_string()
