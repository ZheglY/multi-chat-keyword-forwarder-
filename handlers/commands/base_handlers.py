from datetime import datetime
from aiogram import Router
from aiogram.enums import ChatType
from aiogram.filters import CommandStart
from aiogram.types import Message
from telethon import events

from utils.json_keywords_manager import keywords_manager
from utils.logger import get_logger
from utils.special_func import is_user_allowed
from config.bot_config import client


logger = get_logger(__name__)
base_handlers = Router()



@base_handlers.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.chat.type != ChatType.PRIVATE:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å /start –≤ —á–∞—Ç–µ {message.chat.id}")
        return

    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/filters ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/ban ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω —Å–ª–æ–≤–∞\n\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞—é –∏—Ö —Ç–µ–±–µ."
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")


@client.on(events.NewMessage(incoming=True, func=lambda e: not e.is_private))
async def keyword_monitor(event):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""

    try:
        chat = await event.get_chat()
        my_participant = await client.get_permissions(chat, 'me')
        if not my_participant:
            return
    except Exception as e:
        logger.debug(e)
        return

    try:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.raw_text[:50]}...")

        text = event.raw_text.lower() if event.raw_text else ""

        filters = keywords_manager.get_keywords()
        ban_words = keywords_manager.get_ban_words()

        found_ban_words = [word for word in ban_words if word.lower() in text]
        if found_ban_words:
            return

        found_keywords = [word for word in filters if word.lower() in text]
        if not found_keywords:
            return


        if not found_keywords:
            return

        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        chat = await event.get_chat()
        sender = await event.get_sender()

        chat_id = event.chat_id
        message_id = event.id
        message_link = f"https://t.me/c/{str(chat_id).replace('-100', '')}/{message_id}"

        report = (
            "==============================\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n\n"
            f"üí¨ –ß–∞—Ç: {chat.title if hasattr(chat, 'title') else 'Private Chat'}\n"
            f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:\n{event.raw_text}\n\n"
            f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_keywords)}\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender.first_name} {getattr(sender, 'last_name', '') or ''}\n"
            f"üì± Username: @{sender.username if hasattr(sender, 'username') and sender.username else 'N/A'}\n"
            f"üÜî User ID: {sender.id}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {message_link}\n"
            "=============================="
        )


        await client.send_message(
            entity='me',
            message=report,
            link_preview=False
        )

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —á–∞—Ç–µ {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)



