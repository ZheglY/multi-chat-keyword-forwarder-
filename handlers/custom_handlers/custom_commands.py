from aiogram import Router, F
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from states.all_states import FiltersStates
from utils.logger import get_logger
from utils.special_func import is_user_allowed
from utils.json_keywords_manager import keywords_manager

logger = get_logger(__name__)
filters_router = Router()



@filters_router.message(Command("ban"))
async def show_ban_words(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban"""
    if message.chat.type != ChatType.PRIVATE:
        return

    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    current_ban_words = keywords_manager.get_ban_words()
    text = (
            f"üîç –¢–µ–∫—É—â–∏–µ –±–∞–Ω —Å–ª–æ–≤–∞:\n {current_ban_words}" 
            '\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n'
            '–ü—Ä–∏–º–µ—Ä: BANK —Ä–∞—Å—Å—ã–ª–∫–∞ –°–ü–ê–ú'
    )

    await state.set_state(FiltersStates.ban_words)
    await message.answer(text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /ban")


@filters_router.message(FiltersStates.ban_words)
async def save_ban_words(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–∞–Ω —Å–ª–æ–≤"""
    try:
        ban_words = [word.strip() for word in message.text.split() if word.strip()]

        if not ban_words:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –±–∞–Ω-—Å–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        keywords_manager.set_ban_words(ban_words)

        updated_ban_words = keywords_manager.get_ban_words()

        text = (f'‚úÖ –ë–∞–Ω-—Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n'
                f'–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: {" ".join(updated_ban_words)}\n\n'
                f'–¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –±—É–¥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è.')

        await state.clear()
        await message.answer(text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∞–Ω-—Å–ª–æ–≤–∞: {updated_ban_words}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–Ω-—Å–ª–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–Ω-—Å–ª–æ–≤")


# ------------------------------------------------------------------------------------------------


@filters_router.message(Command("filters"))
async def show_filters(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /filters"""
    if message.chat.type != ChatType.PRIVATE:
        return

    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    current_filters = keywords_manager.get_keywords()

    text = (
            f"üîç –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {current_filters}\n"
            '\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n'
            '–ü—Ä–∏–º–µ—Ä: Youtube reels –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂'
    )

    await state.set_state(FiltersStates.filter_words)
    await message.answer(text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /filters")


@filters_router.message(FiltersStates.filter_words)
async def save_filters(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        new_filters = [word.strip() for word in message.text.split() if word.strip()]

        if not new_filters:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        keywords_manager.set_keywords(new_filters)
        updated_filters = keywords_manager.get_keywords()

        text = (f'‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n'
                f'–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: {" ".join(updated_filters)}\n\n'
                f'–ü—Ä–æ–¥–æ–ª–∂–∞—é –∏—Å–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º...')

        await state.clear()
        await message.answer(text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞: {updated_filters}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")